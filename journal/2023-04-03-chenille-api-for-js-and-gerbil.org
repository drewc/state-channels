#+title: Chenille API for JS and Gerbil
#+date: <2023-04-03 12:52>
#+description:
#+filetags:

* Introduction

We've got to "simulate" the Chenille state channels API in JS.

Here's what we figured out the night of the 4th.

#+begin_src scheme
;; A Chenille is essentially a EUTXO (UTXO with multiple assets and a lock script)
;; with a persistent id (its ChenilleId) and additional data that can be queried.
(define-type ChenilleState
  (Record
   balances: [Balances]
   control: [(ContentAddressed ChenilleTerms)]
   data: Bytes32)) ;; optional data synchronously updated by the control program,
   ;; typically a mutually agreed random nonce to prevent replay attacks on multi-session chenilles,
   ;; or the hash of such a nonce and some data to be used as input for the term
   ;; and verified as output for more elaborate chenilles.
   ;; For instance, it could include a digest of the cumulated-deposits and
   ;; cumulated-withdrawals balances for state channels with asynchronous deposits and withdrawals, etc.

;; Additional data, interaction-specific, associated to a Chenille
;; that can be queried asynchronously by other contracts.
;; That's where e.g. the state of the Laconic Bridge will be stored,
;; or messages sent by oracles and bridges, etc.
;; In particular, some state channels that allow for asynchronous deposits and withdrawals
;; will have in their heap entries as follow
;; cumulatedDeposits: [Balances] ;; cumulated deposits of each participant since creation
;; cumulatedWithdrawals: [Balances] ;; cumulated withdrawals of each participant since creation
#+end_src

So the following is from an older version kinda/sorta but it matters not as after doing so, we have shared state!

* Mirroring state

Ok, here's the idea. We start with a state and any time it is modified we dial other peers.

Wait, what is the starting state? Ok, let's start with that.

#+begin_src js :noweb-ref State
  function State() {
    this.sequence = 0;
    this.assets = {}
    return this
  }

  State.prototype.deposit = function (name, amount) {
    return this.assets[name] = this.assets[name] || 0 + amount;
  }
  State.prototype.withdraw = function (name, amount) {
    return this.deposit(name, -Math.abs(amount));
  }
  State.prototype.transfer = function (from, to, amount) {
    this.withdraw(from, amount);
    return this.deposit(to, amount)
  }

#+end_src

When we start we give our state and recieve theirs.

#+begin_src js :noweb-ref State
  State.prototype.send = function (stream) {
    const vec = uint8ArrayFromString(JSON.stringify(this))
    // console.log("Sending ", this, ' as ', vec, ' over ', stream)
    return pipe([vec],stream)
  }

  State.prototype.recieve = function (stream) {
    let state ;
    return (async _ => {
      await pipe(stream,
                 async function (source) {
                   for await (const msg of source) {
                     state = uint8ArrayToString(msg.subarray())
                   }
                 }).then(_=> state)
    })()
  }
  State.prototype.protocol = '/state-channels/0.0.1';

  State.prototype.dial = function (peer) {
    return libp2p.dialProtocol(peer, this.protocol)
      .then(stream => {
        //console.log(peer.toString(), " has answered, giving it ", this)
        return this.send(stream) // pipe(
        //   [uint8ArrayFromString(JSON.stringify(this))],
        //   stream
        // )
      })
  }

  State.prototype.answer = function (conn) {
    const { connection, stream } = conn, { remotePeer } = connection;
    let remote_state;
    return pipe(
      stream,
      async function (source) {
        for await (const msg of source) {
          remote_state = uint8ArrayToString(msg.subarray())
        }
      }
    ).then(_=> JSON.parse(remote_state))
  }

  State.prototype.merge = function (new_state) {
    this.sequence = this.sequence + 1;
    console.log("Have assets: ", this.assets, " and new ", new_state)
    Object.assign(this.assets, new_state.assets);
    return this;
  }


    Object.assign(StateChannels, { state: new State() })
#+end_src



* /File/ =state-channels.js=

#+begin_src js :noweb yes :tangle ../js/state-channels.js
  import { pipe } from 'it-pipe'
  import { map } from 'streaming-iterables'
  import { toBuffer } from 'it-buffer'
  import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'
  import { toString as uint8ArrayToString } from 'uint8arrays/to-string'


    const StateChannels = globalThis.StateChannels;

    <<State>>

    function Peer(detail = { id: "RemoteId",
                             stdin: "The stream to",
                             stdout: "The stream from",
                             libp2p: "the libp2p instance"
                           }
                 )
  {
      this.$sc = StateChannels;
      Object.assign(this, detail)
      const existing = this.exists()
      if (existing) {
        Object.assign(existing, this)
        return existing;
      } else return this.add();
  }

    const peerExists = (detail, sc = StateChannels) => {
      return sc.peers.find(p => p.id === detail.id)
    }

    Peer.prototype.exists = function() {
      return peerExists(this, this.$sc)
    }

    const addPeer = (peer, sc = StateChannels) => {
      const pee = peer instanceof Peer ? peer : new Peer(peer);
      sc.peers.push(pee)
      return pee;
    }

    Peer.prototype.add = function () {
      return addPeer(this, this.$sc)
    }

    const findPeer = (id, $sc = StateChannels) => {
      const rid = typeof id === 'string' ? id : id.id;
      return $sc.peers.find(p => p.id === rid);
    };

    Peer.prototype.find = function (id) {
      if (id === undefined) { id = this.id }
      return findPeer(id, this.$sc);
    }


    Object.assign(StateChannels, {
      peers: [],
      addPeer(detail) {
        existing = peerExists(detail);
        return existing || addPeer(detail)
      },
      Peer,
      findPeer
    });

  export default StateChannels;
#+end_src


* /File/ =index.js=

#+begin_src js :tangle ../js/index.js
  import { createLibp2p } from 'libp2p'
  import { webSockets } from '@libp2p/websockets'
  import { webRTCStar } from '@libp2p/webrtc-star'
  import { noise } from '@chainsafe/libp2p-noise'
  import { mplex } from '@libp2p/mplex'
  import { bootstrap } from '@libp2p/bootstrap'

  import StateChannels from './state-channels'

  import { pipe } from 'it-pipe'
  import { map } from 'streaming-iterables'
  import { toBuffer } from 'it-buffer'
  import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'
  import { toString as uint8ArrayToString } from 'uint8arrays/to-string'

  Object.assign(StateChannels, { pipe, uint8ArrayFromString })


  document.addEventListener('DOMContentLoaded', async () => {
    const wrtcStar = webRTCStar()

    // Create our libp2p node
    const libp2p = await createLibp2p({
      start: false,
      connectionManager: {
    /**
     ,* The total number of connections allowed to be open at one time
     ,*/
    maxConnections: 10,
    minConnections: 1,
      },
      addresses: {
        // Add the signaling server address, along with our PeerId to our multiaddrs list
        // libp2p will automatically attempt to dial to the signaling server so that it can
        // receive inbound connections from other peers
        listen: [
          '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',
          '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star'
        ]
      },
      transports: [
       // webSockets(),
        wrtcStar.transport
      ],
      connectionEncryption: [noise()],
      streamMuxers: [mplex()],
      peerDiscovery: [
        wrtcStar.discovery //,
        // bootstrap({
        //   list: [
        //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',
        //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
        //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',
        //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',
        //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt'
        //   ]
        // })
      ]
    })

    // UI elements
    const status = document.getElementById('status')
    const output = document.getElementById('output')

    output.textContent = ''

    function log (txt) {
      console.info(txt)
       // output.textContent += `${txt.trim()}\n`
    }

     // Listen for new connections to peers
        libp2p.connectionManager.addEventListener('peer:connect', (evt) => {
          const connection = evt.detail, id = connection.remotePeer
          const { state, Peer } = StateChannels;
          console.log(`Connected to ${id}`, state)
          state.dial(id).then(_=> {
            const peer = new Peer({ id: id.toString(),
                                    connection
                                  });
            return peer

            }). catch(e => connection.close())
          // libp2p.dialProtocol(id, '/state-channels/0.0.1')
           // .then(stream => {
          //    console.log(id.toString(), " has answered")

          // //   const newpeer = new StateChannels.Peer(
          // //     { id: id.toString(),
          // //       stdin: stream,
          // //       libp2p: libp2p
          // //     })
          //    pipe(
          //      [uint8ArrayFromString(JSON.stringify(state))],
          //      stream
          //    )
          // //   console.log ('sent ', state.send(stream));


          //    }).catch(e => connection.close() );

         // setTimeout(_=>{ connection.close() }, 100)
        })


         // Listen for new peers
     libp2p.addEventListener('peer:discovery', (evt) => {
       const peer = evt.detail, id = peer.id.toString()
       // console.log(`Found peer ${peer.id.toString()}`)

       if (StateChannels.findPeer(id)) {
         console.log("Already have this peer:", id)
         return false
       }


       // dial them when we discover them
       libp2p.dialProtocol(evt.detail.id, '/other-state-channels/0.0.1').then(stream => {

         //stream.close()
       }).catch(err => {
    //     log(`Could not dial ${evt.detail.id}`, err, peer)
       })
     });
     let conns = []
          // Listen for peers disconnecting
     libp2p.connectionManager.addEventListener('peer:disconnect', (evt) => {
       const connection = evt.detail
       console.log(`Disconnected from ${connection.remotePeer.toString()}`)
     })

     // Handle messages for the protocol
      var mylibp2phandler = libp2p.handle('/state-channels/0.0.1', async (conn) => {
        const { state } = StateChannels;
        return state.answer(conn).then (s => {
          state.merge(s)
          demoUI.displayState()
          console.log("Merged State:", state)
        });
        const { connection, stream } = conn, { remotePeer } = connection,
              peer = new StateChannels.Peer({
                id: remotePeer.toString(),
                stdout: stream,
                libp2p
              })

        console.log("handling/answering dial", remotePeer.toString())
        pipe(
              stream,
              async function (source) {
                for await (const msg of source) {
                  console.log(uint8ArrayToString(msg.subarray()))
                }
              }


         )
        pipe(
           [uint8ArrayFromString('from 2 to 1')],
           stream
         )


      })

    status.innerText = 'StateChannels started!'
    console.log(`libp2p id is ${libp2p.peerId.toString()}`)

    var { StateChannels } = globalThis;
    StateChannels.state.deposit(libp2p.peerId.toString(), 0)

    // Export libp2p to the window so you can play with the API
    globalThis.libp2p = libp2p

  })

#+end_src
