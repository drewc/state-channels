#+title: Proposed and Accepted State, in queue
#+date: <2023-04-07 10:16>
#+description:
#+filetags:

* Intro

We've got a way to share stare. What if we want to approve?

*Do The Simplest Thing That Could Possibly Work*

The way is see it is simple, though conflicts may be difficult.

  - Every node has a queue into which messages are sent.
  - The user is has a display of the queue with accept/reject buttons.
  - When an item is accepted, the state is updated.
  - When rejected, that propogates so that all nodes reject it.
      - If already accepted the node's state is updated.

* Chenille? Trees! Branches! Leaves!

Because we've chosen =Chenille= as the generic datatype name, with "message" and "queue" being overused along with non-metaphoric as well, it's a simple conclusion.

*Some caterpillars essentially talk with their rear ends, scraping oar-like structures on leaf surfaces to signal turf ownership to intruders.*

So we leave a signal our intention on a leaf. A leaf has a veign structure, aka what the leaf does and how it will grow.

** Veins
:PROPERTIES:
:header-args:js: :noweb-ref trees
:END:

A "vein" is a message with a type and some data.

#+begin_src js
  function Vein (type, data) {
    Object.assign(this, { type, data })
    return this
  }
#+end_src

So, for example, if we want to deposit into as asset, Vein structure would be simple.

#+begin_src js :noweb-ref test-tree
  const testDeposit = new Vein("deposit", {
    asset: "ase21azvdfa3rqf6",
    amount: 42
  });
#+end_src


 A leaf is veins + a surface upon which a caterpiller can scrape a "yes/no" signal.

 #+begin_src js
   function Leaf (veins, id = uuidv4) {
     const vs = veins instanceof Array ? veins : [veins]
     this.veins = vs;
     this.scrapes = []
     this.id = id
     return this;
   }

   function Scrape(nodeId, msg) {
     Object.assign(this { nodeId, msg });
     return this;
   }

   Leaf.prototype.scrape (nodeId, msg) {
     this.scrapes.push(new Scrape(...arguments))
   }
 #+end_src

 So to deposit in an account we construct a leaf and scrape it to approve.

 #+begin_src js :tangle ../js/utils.js
    function currentChenille() {
      globalThis.StateChannels.chenilleContext
    }

    function currentTree() {
      globalThis.StateChannels.tree
    }

   function uuidv4() {
     return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
       (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
     );
   }


#+end_src

Make a leaf.

#+begin_src js :noweb-ref test-tree
  const testLeaf = new Leaf(testDeposit);
  testLeaf.scrape(currentChenille().nodeId, true)
#+end_src

Then we add it to our tree.

#+begin_src js
  function Branch(leaves) {
    const ls = leaves instanceof Array ? leaves : [leaves]
    this.leaves = ls
    return this;
  }

  Branch.prototype.sprout = function (leaf) {
    return this.leaves.push(leaf)
  }
#+end_src

** Signal
:PROPERTIES:
:header-args:js: :noweb-ref signals
:END:

And we signal it.

#+begin_src js
  function Signal (type = "sprout", data) {
    Object.assign(this, { type, data })
  }

  Signal.prototype.send = function (stream) {
    const vec = uint8ArrayFromString(JSON.stringify(this))
    // console.log("Sending ", this, ' as ', vec, ' over ', stream)
    return pipe([vec],stream)
  }

  Signal.prototype.recieve = function (stream) {
    let state ;
    return (async _ => {
      await pipe(stream,
                 async function (source) {
                   for await (const msg of source) {
                     state = uint8ArrayToString(msg.subarray())
                   }
                 }).then(_=> state)
    })()
  }
  Signal.prototype.protocol = '/state-channels/0.0.2';

  Signal.prototype.dial = function (peer) {
    return libp2p.dialProtocol(peer, this.protocol)
      .then(stream => {
        //console.log(peer.toString(), " has answered, giving it ", this)
        return this.send(stream) // pipe(
        //   [uint8ArrayFromString(JSON.stringify(this))],
        //   stream
        // )
      })
  }

  Signal.prototype.answer = function (conn) {
    const { connection, stream } = conn, { remotePeer } = connection;
    let remote_state;
    return pipe(
      stream,
      async function (source) {
        for await (const msg of source) {
          remote_state = uint8ArrayToString(msg.subarray())
        }
      }
    ).then(_=> JSON.parse(remote_state))
  }



#+end_src

* /File/ =state-tree.js=
#+begin_src js :tangle ../js/state-tree.js :noweb yes
   <<trees>>



#+end_src

* /File/ =state-signal.js=


#+begin_src js :tangle ../js/state-signal.js :noweb yes
  import { pipe } from 'it-pipe'
  import StateChannels from './state-channels'

  const { libp2p } = StateChannels;

  <<signals>>

  StateChannnels.Signal = Signal

  export default { Signal }
#+end_src


* /File/ =index.js=

#+begin_src js :tangle ../js/index.js
  import { createLibp2p } from 'libp2p'
import { webSockets } from '@libp2p/websockets'
import { webRTCStar } from '@libp2p/webrtc-star'
import { noise } from '@chainsafe/libp2p-noise'
import { mplex } from '@libp2p/mplex'
import { bootstrap } from '@libp2p/bootstrap'

import StateChannels from './state-channels'

import { pipe } from 'it-pipe'
import { map } from 'streaming-iterables'
import { toBuffer } from 'it-buffer'
import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'
import { toString as uint8ArrayToString } from 'uint8arrays/to-string'

Object.assign(StateChannels, { pipe, uint8ArrayFromString })


document.addEventListener('DOMContentLoaded', async () => {
  const wrtcStar = webRTCStar()

  // Create our libp2p node
  const libp2p = await createLibp2p({
    start: false,
    connectionManager: {
  /**
   * The total number of connections allowed to be open at one time
   */
  maxConnections: 10,
  minConnections: 1,
    },
    addresses: {
      // Add the signaling server address, along with our PeerId to our multiaddrs list
      // libp2p will automatically attempt to dial to the signaling server so that it can
      // receive inbound connections from other peers
      listen: [
        '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',
        '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star'
      ]
    },
    transports: [
     // webSockets(),
      wrtcStar.transport
    ],
    connectionEncryption: [noise()],
    streamMuxers: [mplex()],
    peerDiscovery: [
      wrtcStar.discovery //,
      // bootstrap({
      //   list: [
      //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',
      //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
      //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',
      //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',
      //     '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt'
      //   ]
      // })
    ]
  })

  // UI elements
  const status = document.getElementById('status')
  const output = document.getElementById('output')

  output.textContent = ''

  function log (txt) {
    console.info(txt)
     // output.textContent += `${txt.trim()}\n`
  }

   // Listen for new connections to peers
      libp2p.connectionManager.addEventListener('peer:connect', (evt) => {
        const connection = evt.detail, id = connection.remotePeer
        const { state, Peer } = StateChannels;
        console.log(`Connected to ${id}`, state)
        state.dial(id).then(_=> {
          const peer = new Peer({ id: id.toString(),
                                  connection
                                });
          return peer

          }). catch(e => connection.close())
      })


       // Listen for new peers
   libp2p.addEventListener('peer:discovery', (evt) => {
     const peer = evt.detail, id = peer.id.toString()
     // console.log(`Found peer ${peer.id.toString()}`)

     if (StateChannels.findPeer(id)) {
       console.log("Already have this peer:", id)
       return false
     }


     // dial them when we discover them
     libp2p.dialProtocol(evt.detail.id, '/other-state-channels/0.0.1').then(stream => {

       //stream.close()
     }).catch(err => {
  //     log(`Could not dial ${evt.detail.id}`, err, peer)
     })
   });
   let conns = []
        // Listen for peers disconnecting
   libp2p.connectionManager.addEventListener('peer:disconnect', (evt) => {
     const connection = evt.detail
     console.log(`Disconnected from ${connection.remotePeer.toString()}`)
   })

   // Handle messages for the protocol
    var mylibp2phandler = libp2p.handle('/state-channels/0.0.1', async (conn) => {
      const { state } = StateChannels;
      return state.answer(conn).then (s => {
        state.merge(s)
        demoUI.displayState()
        console.log("Merged State:", state)
      });
      const { connection, stream } = conn, { remotePeer } = connection,
            peer = new StateChannels.Peer({
              id: remotePeer.toString(),
              stdout: stream,
              libp2p
            })

      console.log("handling/answering dial", remotePeer.toString())
      pipe(
            stream,
            async function (source) {
              for await (const msg of source) {
                console.log(uint8ArrayToString(msg.subarray()))
              }
            }


       )
      pipe(
         [uint8ArrayFromString('from 2 to 1')],
         stream
       )


    })

  status.innerText = 'StateChannels started!'
  console.log(`libp2p id is ${libp2p.peerId.toString()}`)

  var { StateChannels } = globalThis;
  StateChannels.state.deposit(libp2p.peerId.toString(), 0)

  // Export libp2p to the window so you can play with the API
  globalThis.libp2p = libp2p
  StateChannels.libp2p = libp2p

})

#+end_src
