#+title: Refactor, build, finalize, and done.
#+date: <2023-03-22 09:57>
#+description: Almost done! Time to clean things up
#+filetags: Gerbil MuKn state-channels

* Introduction

 We need to clean things up and make them PR'able. This is hopefully the end of this task! :D

* Gerbil Patches

We've got a lot to push upstream for gerbil, and a lot of uneeded modifications. Time to coalesce the former while getting rid of the latter.

** Gerbil master to local branch

We already have it as a remote

#+begin_src bash :session refactor-shell
  git remote -v
#+end_src
=>
| gerbil | git@github.com:drewc/gerbil.git (fetch)         |
| gerbil | git@github.com:drewc/gerbil.git (push)          |
| origin | git@github.com:drewc/state-channels.git (fetch) |
| origin | git@github.com:drewc/state-channels.git (push)  |

#+begin_src bash :session refactor-shell
  git branch -a | cat
#+end_src
| *                     | main |
| remotes/gerbil/debian |      |
| remotes/gerbil/errorf |      |
| remotes/gerbil/master |      |
| remotes/gerbil/xenial |      |
| origin/main           |      |
| remotes/origin/main   |      |

 Ok, we'll add a =gerbil= branch that mirrors the upstream.

 #+begin_src bash :session refactor-shell
   git fetch gerbil
 #+end_src

 #+RESULTS:
 : Enter passphrase for key '/home/drewc/.ssh/id_rsa':

 #+begin_src bash
   cd ../..
   git stash
   git checkout --orphan gerbil
   git rm -rf .
   git clean -fdx
   echo foo > bar.baz
   git add .
   git commit -m "fake branch"
   git branch -u gerbil/master
 #+end_src

 We now have a commit to delete at some point

 #+begin_src sh
   git pull --rebase
   git log -1 --pretty --oneline
   # => # 9a427d58 (HEAD -> gerbil) fake branch
   git reset --soft HEAD~1
   git log -1 --pretty --oneline
   # 5741b45e (HEAD -> gerbil, gerbil/master) Merge branch 'vyzo:master' into master
 #+end_src

 Awesome, we now have a gerbil branch

 #+begin_src sh
   git checkout main
 #+end_src

** Fix the =safe='s back to =not safe=


#+begin_src bash
  SED_SAFETY='s/declare (safe/declare (not safe/g'
  sed -i "$SED_SAFETY" ../../gerbil/src/gerbil/runtime/gx-gambc*
#+end_src

** Try out the build

First commit. Then

#+begin_src sh
  cd /tmp/;
  rm -rf state-channels
  git clone ~/me/MuKn/src/state-channels
  cd state-channels
  ./bin/make
#+end_src


That is one problem! The ~build.ss~ takes a file list before the copy of the files is there. Also it seems to require the first build before the second?

* The =./bin/make= script

We add a way to make gerbil as well. Specifically the package version matters but is not set up to be a subtree.

#+begin_src bash :shebang #!/usr/bin/env bash :tangle ../../bin/make
  export STATE_CHAN_BIN="$(cd `dirname $0`; pwd)"
  export STATE_CHAN_SRC=$(cd $STATE_CHAN_BIN/.. ; pwd)
  export GERBIL_HOME=$STATE_CHAN_SRC/gerbil

  make_gerbil() {
      cd $GERBIL_HOME ;
      ./configure PACKAGE_VERSION=v0.16-MuKn-0.1
      make ensure-gx-version ;
      cd src && ./build.sh;
  }

  make_state() {
      export PATH="$STATE_CHAN_BIN:$PATH"
      cd $STATE_CHAN_SRC; ./build.ss "$@"
  }

  if [[ "$1" == 'gerbil' ]]; then
      make_gerbil
      exit $?
  else
      if [[ ! -e $GERBIL_HOME/bin/gxi ]];  then
          make_gerbil
      fi
      make_state "$@"
  fi

#+end_src

* Build.ss

#+begin_src scheme :tangle ../../build.ss :shebang #!/usr/bin/env gxi
  (import :std/make)

  ;; the source directory anchor
  (def srcdir
    (path-normalize (path-directory (this-source-file))))

  (if (equal? srcdir (current-directory)) #t
      (begin
        (displayln "Going into " srcdir " for building state-channels"
                   " from " (initial-current-directory))
        (current-directory srcdir)))

  ;; the library module build specification
  (def (library-build-spec)
    (def lib-build-spec '("src/socks" "examples/mp1" "examples/mp1_1" "exe"))
    (let src ((fs (directory-files "src")))
      ;; (displayln "Have " (length fs) " files in src")
      (if (not (null? fs))
        (let ((f (car fs)))
          (displayln "f:" f (equal? f "clish_prg.ss"))
          (if (and (equal? (path-extension f) ".ss")
                   (not (equal? f "clish.ss"))
                   (not (equal? f "scm2js.ss"))
                   (not (equal? f "clish_prg.ss")))
            (set! lib-build-spec
              (cons (path-expand (path-strip-extension f)
                                 "src/")
                    lib-build-spec)))
          (src (cdr fs)))))

    lib-build-spec)

  (def init-lib-build-spec (library-build-spec))
  (def (make-lib (spec init-lib-build-spec))
    ;; (displayln "Making Library from:" lib-build-spec)
    (make srcdir: srcdir
          bindir: srcdir
          libdir: (path-expand "lib/" srcdir)
          optimize: #t
          debug: 'src      ; enable debugger introspection for library modules
          static: #t       ; generate static compilation artifacts; required!
          ;; prefix: "mukn/state-channels/
          ;; build-deps: "build-deps" ; this value is the default
          spec))


  (def bin-build-spec '((static-exe: "exe")))


  (def (make-bin)
    (def libdir (path-expand "lib/" srcdir))
    (add-load-path libdir)
    ;; this action builds the static executables -- no debug introspection
    (make srcdir: srcdir
          bindir: (path-expand "bin/" srcdir)
          libdir: libdir
          verbose: 2
          optimize: #t
          debug: #f             ; no debug bloat for executables
          static: #t            ; generate static compilation artifacts; required!
          build-deps: "build-deps-bin" ; importantly, pick a file that differs from above
          bin-build-spec))

  (def js-bin-build-spec
    '((static-exe: "exe"
                                          ; "-verbose"
                   "-target" "js")))

  (def (compile-static-exe mod opts settings)
    (def srcpath (source-path mod ".ss" settings))
    (def binpath (binary-path mod opts settings))
    (def gsc-opts (compile-exe-gsc-opts opts))
    (def gxc-opts
      [invoke-gsc: #t
                   output-file: binpath
                   verbose: (settings-verbose>=? settings 9)
                   debug: (settings-static-debug settings)
                   (when/list gsc-opts [gsc-options: gsc-opts]) ...])

    (message "... compile static js? exe " mod " -> " gxc-opts)
    (gxc-compile mod gsc-opts (make-settings-static settings))
    (message "... compile static exe " mod " -> " binpath)
    (gxc#compile-static-exe srcpath gxc-opts))

  (set! std/make#compile-static-exe compile-static-exe)
  (def (make-js-bin)
    (def libdir (path-expand "lib/" srcdir))
    (add-load-path libdir)
    ;; this action builds the static executables -- no debug introspection
    (make srcdir: srcdir
          bindir: (path-expand "js/bin/" srcdir)
          libdir: libdir
          verbose: 2
          optimize: #f
          debug: #f             ; no debug bloat for executables
          static: #t            ; generate static compilation artifacts; required!
          build-deps: "build-deps-js-bin" ; importantly, pick a file that differs from above
          js-bin-build-spec))

  (def html-bin-build-spec
    '((static-exe:
       "exe" bin: "exe.html.stripped"
       "-target" "js")))

  (def (make-html-bin)
    (def libdir (path-expand "lib/" srcdir))
    (add-load-path libdir)
    ;; this action builds the static executables -- no debug introspection
    (make srcdir: srcdir
          bindir: (path-expand "html" srcdir)
          libdir: libdir
          verbose: 2
          optimize: #f
          debug: #f             ; no debug bloat for executables
          static: #t            ; generate static compilation artifacts; required!
          build-deps: "build-deps-html-bin" ; importantly, pick a file that differs from above
          html-bin-build-spec))

  (def (main . args)
    (match args
      (["copy-gerbil-state-src"]
       (shell-command "./build gerbil"))
      (["copy-filesocks_dummy"]
       (shell-command "backends/build filesocks_dummy"))
      (["lib"] (make-lib)
       (make-lib (library-build-spec)))
      (["bin"] (make-bin))
      (["node"] (make-js-bin))
      (["browser"] (make-html-bin))
      ([]
       (map main
            ["copy-gerbil-state-src"
             "copy-filesocks_dummy"
             "lib" "bin" "node" "browser"]))))


#+end_src
